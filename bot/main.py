import asyncio
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import BotCommandScopeAllPrivateChats, BotCommandScopeChat

from bot.config import BOT_TOKEN, ADMIN_IDS
from bot.models.db import init_db
from bot.controllers import common_handlers, schedule_handlers, admin_handlers

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')
logger = logging.getLogger(__name__)

async def on_startup(dp: Dispatcher):
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    logger.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
    common_commands = [
        types.BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ / –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        types.BotCommand("help", "‚ùì –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        types.BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
    ]
    await dp.bot.set_my_commands(common_commands, scope=BotCommandScopeAllPrivateChats())
    if ADMIN_IDS:
        admin_specific_commands = [
            types.BotCommand("admin", "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
            types.BotCommand("pending_users", "‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            types.BotCommand("list_all_users", "üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
            types.BotCommand("user_profile", "üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ ID)"),
            types.BotCommand("task_info", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ (–ø–æ ID)"),
            types.BotCommand("list_tasks", "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á"),
            types.BotCommand("force_cancel_task", "üö´ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"),
            # types.BotCommand("delete_task_data", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"), # –£–¥–∞–ª–µ–Ω–∞, —Ç.–∫. —Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ task_info
            types.BotCommand("broadcast", "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"),
            types.BotCommand("view_feedback", "üì¨ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã"),
        ]
        all_admin_commands = common_commands + admin_specific_commands
        for admin_id in ADMIN_IDS:
            try: await dp.bot.set_my_commands(all_admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
            except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")

async def on_shutdown(dp: Dispatcher):
    logger.warning('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.'); await dp.storage.close(); await dp.storage.wait_closed(); logger.info("–•—Ä–∞–Ω–∏–ª–∏—â–µ FSM –∑–∞–∫—Ä—ã—Ç–æ.")

def main():
    if not BOT_TOKEN: logger.critical("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω."); exit("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    bot = Bot(token=BOT_TOKEN); storage = MemoryStorage(); dp = Dispatcher(bot, storage=storage)
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    common_handlers.register_common_handlers(dp)
    schedule_handlers.register_schedule_handlers(dp)
    admin_handlers.register_admin_handlers(dp)
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã."); logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞...")
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown, skip_updates=True, allowed_updates=types.AllowedUpdates.all())

if __name__ == '__main__':
    main()